/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dao.PlaylistDataInterface;
import dao.RecipeDataInterface;
import dao.ProfileDataInterface;
import domain.Profile;
import domain.Recipe;
import gui.helpers.SimpleListModel;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Hyunsun
 */
public class PlayListSearch extends javax.swing.JDialog {
        private final RecipeDataInterface recdao;
        private final PlaylistDataInterface playdao;
		  private final ProfileDataInterface prodao;
	private SimpleListModel myModel = new SimpleListModel();
        private Profile profileSelected;
        private final java.awt.Frame parentPassThrough;
        private MainMenu mm;
        final JPanel panel = new JPanel();
	
    /**
     * Creates new form PlayListSearch
     */
    public PlayListSearch(java.awt.Frame parent, boolean modal, RecipeDataInterface recdao, PlaylistDataInterface playdao, ProfileDataInterface prodao, Profile profile, MainMenu mm) {
        super(parent, modal);
        profileSelected = profile;
        parentPassThrough = parent;
		  this.recdao = recdao;
		  this.playdao = playdao;
		  this.prodao = prodao;
        this.mm = mm;
        initComponents();
        myModel = new SimpleListModel();
        myModel.updateItems(playdao.getAllPlaylists(profileSelected.getUserID()));
        playlistList.setModel(myModel);
        this.setResizable(false);
        
        Color backgroundColor = new Color(229, 214, 201);
                this.getContentPane().setBackground(backgroundColor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        createNewPlaylist = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        viewButton1 = new javax.swing.JButton();
        deletePlaylist = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        playlistList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setBackground(new java.awt.Color(239, 240, 234));
        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(75, 68, 41));
        jLabel2.setText("C O L L E C T I O N S");

        jLabel6.setBackground(new java.awt.Color(239, 240, 234));
        jLabel6.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(139, 191, 166));
        jLabel6.setText("Bone");

        jLabel7.setBackground(new java.awt.Color(239, 240, 234));
        jLabel7.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 167, 167));
        jLabel7.setText("Apple");

        jLabel8.setBackground(new java.awt.Color(239, 240, 234));
        jLabel8.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(139, 191, 166));
        jLabel8.setText("Tea");

        createNewPlaylist.setBackground(new java.awt.Color(75, 68, 41));
        createNewPlaylist.setFont(new java.awt.Font("맑은 고딕", 0, 15)); // NOI18N
        createNewPlaylist.setForeground(new java.awt.Color(255, 255, 255));
        createNewPlaylist.setText("CREATE");
        createNewPlaylist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createNewPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewPlaylistActionPerformed(evt);
            }
        });

        closeButton.setBackground(new java.awt.Color(75, 68, 41));
        closeButton.setFont(new java.awt.Font("맑은 고딕", 0, 15)); // NOI18N
        closeButton.setForeground(new java.awt.Color(255, 255, 255));
        closeButton.setText("CLOSE");
        closeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        viewButton1.setBackground(new java.awt.Color(75, 68, 41));
        viewButton1.setFont(new java.awt.Font("맑은 고딕", 0, 15)); // NOI18N
        viewButton1.setForeground(new java.awt.Color(255, 255, 255));
        viewButton1.setText("VIEW");
        viewButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButton1ActionPerformed(evt);
            }
        });

        deletePlaylist.setBackground(new java.awt.Color(75, 68, 41));
        deletePlaylist.setFont(new java.awt.Font("맑은 고딕", 0, 15)); // NOI18N
        deletePlaylist.setForeground(new java.awt.Color(255, 255, 255));
        deletePlaylist.setText("DELETE");
        deletePlaylist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deletePlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlaylistActionPerformed(evt);
            }
        });

        playlistList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(94, 162, 129)));
        playlistList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jScrollPane1.setViewportView(playlistList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(viewButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(createNewPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(deletePlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 126, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)))
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 264, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(9, 9, 9)
                .addComponent(jLabel7)
                .addGap(6, 6, 6)
                .addComponent(jLabel8)
                .addGap(228, 228, 228))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNewPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(viewButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(deletePlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createNewPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewPlaylistActionPerformed
        CreatePlayList createPlaylist = new CreatePlayList(parentPassThrough, true, prodao, playdao, mm);
        createPlaylist.setLocationRelativeTo(this);
        createPlaylist.setVisible(true);
        profileSelected = mm.getSignedInProfile();
        myModel.updateItems(playdao.getAllPlaylists(profileSelected.getUserID()));
    }//GEN-LAST:event_createNewPlaylistActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void viewButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButton1ActionPerformed
        String playlistName = playlistList.getSelectedValue();
	if (!(playlistList.isSelectionEmpty())) {
            profileSelected = mm.getSignedInProfile();
            /** Really don't know why I have to do this, but hey **/
            PlayListDisplay viewPlaylist = new PlayListDisplay(parentPassThrough, true, recdao, playdao, playlistName, profileSelected.getUserID(), mm);
            viewPlaylist.setLocationRelativeTo(this);
            viewPlaylist.setVisible(true);
            myModel.updateItems(playdao.getAllPlaylists(profileSelected.getUserID()));
	}
    }//GEN-LAST:event_viewButton1ActionPerformed

    private void deletePlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlaylistActionPerformed
        String playlistName = playlistList.getSelectedValue();
	if (!(playlistList.isSelectionEmpty())) {
            if (!(playlistName.equals("History") || playlistName.equals("Favourites"))){
                profileSelected = mm.getSignedInProfile();

                List<String> listPlaylists = new ArrayList<>();
                listPlaylists = profileSelected.getPlaylists();
                listPlaylists.remove(playlistName);

                profileSelected.setPlaylists(listPlaylists);
                mm.signIn(profileSelected);

                prodao.updateAProfilesPlaylists(profileSelected);

                playdao.dropPlaylist(profileSelected.getUserID(), playlistName);

                myModel.updateItems(playdao.getAllPlaylists(profileSelected.getUserID()));
            } else {
                JOptionPane.showMessageDialog(panel, "Cannot delete Favourites or History!", "Warning!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deletePlaylistActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PlayListSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PlayListSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PlayListSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PlayListSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                PlayListSearch dialog = new PlayListSearch(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton createNewPlaylist;
    private javax.swing.JButton deletePlaylist;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> playlistList;
    private javax.swing.JButton viewButton1;
    // End of variables declaration//GEN-END:variables
}
